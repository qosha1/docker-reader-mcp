name: Publish Docker Reader MCP to NPM

on:
  push:
    branches: [main]
    tags:
      - 'v*'
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version type'
        required: true
        default: 'patch'
        type: choice
        options:
        - patch
        - minor
        - major
      publish:
        description: 'Publish to NPM'
        required: true
        default: true
        type: boolean

permissions:
  contents: write
  id-token: write

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run type check
      run: npm run typecheck

    - name: Build project
      run: npm run build

    - name: Test build output
      run: |
        if [ ! -f "dist/index.js" ]; then
          echo "Build output not found"
          exit 1
        fi

  docker-test:
    runs-on: ubuntu-latest
    needs: test
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build project
      run: npm run build

    - name: Start test containers
      run: |
        docker run -d --name test-nginx nginx:alpine
        docker run -d --name test-redis redis:alpine
        sleep 5

    - name: Test MCP server with real containers
      run: |
        timeout 10s bash -c '
          echo "{\"jsonrpc\":\"2.0\",\"id\":1,\"method\":\"initialize\",\"params\":{\"protocolVersion\":\"2024-11-05\",\"capabilities\":{\"tools\":true,\"resources\":true},\"clientInfo\":{\"name\":\"test\",\"version\":\"1.0.0\"}}}" | node dist/index.js > /tmp/init.json
          if ! grep -q "docker-reader-mcp" /tmp/init.json; then
            echo "Server initialization failed"
            exit 1
          fi
        '
        
        timeout 10s bash -c '
          echo "{\"jsonrpc\":\"2.0\",\"id\":2,\"method\":\"tools/call\",\"params\":{\"name\":\"docker_list_containers\",\"arguments\":{\"all\":false}}}" | node dist/index.js > /tmp/containers.json
          if ! grep -q "test-nginx\|test-redis" /tmp/containers.json; then
            echo "Container listing failed"
            exit 1
          fi
        '

    - name: Cleanup test containers
      if: always()
      run: |
        docker rm -f test-nginx test-redis || true

  publish:
    needs: [test, docker-test]
    runs-on: ubuntu-latest
    if: (github.event_name == 'push' && github.ref == 'refs/heads/main' && !contains(github.event.head_commit.message, '[skip ci]')) || github.event_name == 'release' || (github.event_name == 'workflow_dispatch' && inputs.publish) || startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
      packages: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for proper versioning
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        registry-url: 'https://registry.npmjs.org'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci

    - name: Configure git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"

    - name: Auto bump version (push to main)
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      run: |
        # Get current version from package.json
        CURRENT_VERSION=$(node -p "require('./package.json').version")
        echo "Current version: $CURRENT_VERSION"
        
        # Bump patch version automatically
        npm version patch --no-git-tag-version
        NEW_VERSION=$(node -p "require('./package.json').version")
        echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
        echo "New version: $NEW_VERSION"
        
        # Commit and tag the new version
        git add package.json
        git commit -m "chore: auto-bump version to $NEW_VERSION [skip ci]"
        git tag "v$NEW_VERSION"
        git push origin main --follow-tags

    - name: Bump version (workflow_dispatch)
      if: github.event_name == 'workflow_dispatch'
      run: |
        npm version ${{ inputs.version_type }} --no-git-tag-version
        NEW_VERSION=$(node -p "require('./package.json').version")
        echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
        git add package.json
        git commit -m "chore: bump version to $NEW_VERSION"
        git tag "v$NEW_VERSION"
        git push origin main
        git push origin "v$NEW_VERSION"

    - name: Get version from tag (release/tag)
      if: github.event_name == 'release' || startsWith(github.ref, 'refs/tags/v')
      run: |
        if [[ "${{ github.event_name }}" == "release" ]]; then
          VERSION="${{ github.event.release.tag_name }}"
        else
          VERSION="${GITHUB_REF#refs/tags/}"
        fi
        VERSION=${VERSION#v}
        echo "VERSION=$VERSION" >> $GITHUB_ENV
        npm version $VERSION --no-git-tag-version --allow-same-version
        
    - name: Build project
      run: npm run build
      
    - name: Publish to NPM
      run: npm publish --access public
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        
    - name: Create GitHub Release (workflow_dispatch)
      if: github.event_name == 'workflow_dispatch' && env.NEW_VERSION
      uses: softprops/action-gh-release@v2
      with:
        tag_name: v${{ env.NEW_VERSION }}
        name: Release v${{ env.NEW_VERSION }}
        body: |
          ## Docker Reader MCP v${{ env.NEW_VERSION }}
          
          A fully self-sustaining Model Context Protocol server for reading Docker container logs and information.
          
          ## Features
          - üìã List Docker containers (running and stopped)
          - üìñ Read container logs with filtering options
          - üîç Inspect container details and configuration
          - üìä Get real-time resource usage statistics
          
          ## Installation
          ```bash
          npm install -g docker-reader-mcp
          ```
          
          ## Usage
          ```bash
          docker-reader-mcp
          ```
          
          See [README.md](https://github.com/qosha/docker-reader-mcp/blob/main/README.md) for detailed usage instructions.
        draft: false
        prerelease: false